module.exports = {
  parser: 'babel-eslint',
  plugins: ['node'],
  extends: ['eslint:recommended', 'plugin:node/recommended'],
  parserOptions: {
    ecmaVersion: 7,
    ecmaFeatures: {
      impliedStrict: true
    }
  },
  env: {
    node: true,
    jest: true
  },
  rules: {
    'no-tabs': 2,
    'no-console': 0,
    'node/no-unpublished-require': 0,
    complexity: ['error', { max: 20 }],
    curly: 'error',
    'dot-location': ['error', 'property'],
    'dot-notation': 'error',
    'eqeqeq': 'error',
    'no-alert': 'error',
    'no-eq-null': 'error',
    'no-eval': 'error',
    'no-extra-bind': 'error',
    'no-implicit-globals': 'error',
    'no-implied-eval': 'error',
    'no-invalid-this': 'error',
    'no-iterator': 'error',
    'no-lone-blocks': 'error',
    'no-new-func': 'error',
    'no-new-wrappers': 'error',
    'no-new': 'error',
    'no-proto': 'error',
    'no-return-assign': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-throw-literal': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unused-expressions': 'error',
    'no-useless-call': 'error',
    'no-useless-concat': 'error',
    'no-useless-escape': 'error',
    'no-void': 'error',
    'no-with': 'error',
    'yoda': 'error',
    'brace-style': 'error',
    'camelcase': 'error',
    'comma-style': ['error', 'last'],
    'no-multiple-empty-lines': 'error',
    quotes: ['error', 'single', { "allowTemplateLiterals": true }],
    'arrow-spacing': 'error',
    'no-var': 'error',
    'prefer-const': 'error',
    'max-len': ['error', 120],
    'no-restricted-syntax': ['error', 'FunctionDeclaration'], // these to rules combine to limit function keyword
    'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
    'prefer-arrow-callback' : 'error',
    'no-shadow-restricted-names': 'error',
    'no-shadow': 'error',
    'no-use-before-define': 'error',
    semi: ['error', 'never'],
    'space-before-blocks': 'error',
    'space-before-function-paren': ['error', 'never'],
    'space-in-parens': 'error',
    'space-infix-ops': 'error',
    'space-unary-ops': 'error'
  }
};